generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// Organizations
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userOrganizations UserOrganization[]
  projects          Project[]
}

// User-Organization relationship
model UserOrganization {
  userId         String
  organizationId String
  role           String   @default("member")
  joinedAt       DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
}

// Projects
model Project {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  status         String   @default("active")
  startDate      DateTime?
  endDate        DateTime?
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  workOrders   WorkOrder[]
  tasks        Task[]
  images       ProjectImage[]
}

// Project Images
model ProjectImage {
  id        String   @id @default(cuid())
  projectId String
  url       String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Work Orders
model WorkOrder {
  id          String   @id @default(cuid())
  projectId   String
  code        String   @unique
  title       String
  description String?
  type        String   // Assembly, Part, Service
  status      String   @default("pending")
  priority    String   @default("medium")
  startDate   DateTime?
  dueDate     DateTime?
  completedAt DateTime?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parentId   String?
  parent     WorkOrder?  @relation("WorkOrderHierarchy", fields: [parentId], references: [id])
  children   WorkOrder[] @relation("WorkOrderHierarchy")
  tasks      Task[]
  operations Operation[]
}

// Tasks
model Task {
  id          String    @id @default(cuid())
  workOrderId String?
  projectId   String
  title       String
  description String?
  status      String    @default("pending")
  priority    String    @default("medium")
  assignedTo  String?
  dueDate     DateTime?
  completedAt DateTime?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workOrder  WorkOrder? @relation(fields: [workOrderId], references: [id])
  operations Operation[]
}

// Operations
model Operation {
  id          String    @id @default(cuid())
  taskId      String?
  workOrderId String?
  type        String    // Production, Assembly, QualityControl, Packaging, Shipping, Maintenance, Other
  title       String
  description String?
  status      String    @default("pending")
  startTime   DateTime?
  endTime     DateTime?
  duration    Int?      // in minutes
  performedBy String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  task         Task?           @relation(fields: [taskId], references: [id])
  workOrder    WorkOrder?      @relation(fields: [workOrderId], references: [id])
  timeLogs     TimeLog[]
  qualityCheck QualityCheck?
}

// Time Tracking
model TimeLog {
  id          String    @id @default(cuid())
  operationId String
  userId      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int?      // in minutes
  notes       String?
  createdAt   DateTime  @default(now())

  // Relations
  operation Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)
}

// Quality Control
model QualityCheck {
  id           String   @id @default(cuid())
  operationId  String   @unique
  checkType    String   // Visual, Measurement, Functional, Safety
  status       String   // Passed, Failed, Pending
  checkedBy    String
  checkedAt    DateTime
  notes        String?
  measurements Json?
  qrCode       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  operation Operation       @relation(fields: [operationId], references: [id], onDelete: Cascade)
  images    QualityImage[]
}

// Quality Check Images
model QualityImage {
  id             String   @id @default(cuid())
  qualityCheckId String
  url            String
  caption        String?
  createdAt      DateTime @default(now())

  // Relations
  qualityCheck QualityCheck @relation(fields: [qualityCheckId], references: [id], onDelete: Cascade)
}

// Settings (per organization)
model Settings {
  id             String   @id @default(cuid())
  organizationId String   @unique
  language       String   @default("en")
  timezone       String   @default("UTC")
  dateFormat     String   @default("MM/DD/YYYY")
  theme          String   @default("light")
  customSettings Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}